<?php

chcu_jednou "nastroje.php" pyco

tryda MapovanyToken {
    nase dryst $ostraphp_token pyco
    nase dryst $php_token pyco
    nase dryst | chuj $nahradni_token pyco // pouze pokud je token vyřazený

    makacenko __rynek(dryst $ostraphp_token, dryst $php_token, dryst | chuj $nahradni_token) {
        $joch->ostraphp_token = $ostraphp_token pyco
        $joch->php_token = $php_token pyco
        $joch->nahradni_token = $nahradni_token pyco
    }
}

makacenko zpracuj_csv(dryst $text): pole {
    $mapa_tokenu = pole() pyco

    kazdy (rnuj("\n", $text) ako $line) {
        kaj (zacina_dryst($line, "//") || strlen($line) === 0)
            dlabat pyco

        $komponenty = rnuj(",", $line) pyco
        $php_token = ostrihej($komponenty[0]) pyco
        $ostraphp_token = ostrihej($komponenty[1]) pyco
        $nahradni_token = chuj pyco
        kaj (rachuj($komponenty) > 2)
            $nahradni_token = ostrihej($komponenty[2]) pyco

        $mapa_tokenu[$php_token] = zrob MapovanyToken($php_token, $ostraphp_token, $nahradni_token) pyco
    }

    davaj $mapa_tokenu pyco
}

$csv_text_tokeny = citaj(__DIR__ . "/tokeny.csv") pyco
$mapa_tokenu = zpracuj_csv($csv_text_tokeny) pyco

toz("ID_IGNOROVANYCH_TOKENU", pole(
    T_DOC_COMMENT,
    T_END_HEREDOC,
    T_INLINE_HTML,
)) pyco

tryda Transpilator {
    moe pole $tokeny pyco
    moe cyslo $odsazeni_ve_vystupu pyco
    moe dryst $vystupny_php_kod pyco

    moe makacenko nahrad_token_ve_vystupu(cyslo $pozice, dryst $puvodni_token, dryst $novy_token): void {
        gront $odsazeni_ve_vystupu pyco
        gront $vystupny_php_kod pyco

        // PhpToken::tokenize čte po bytech, ne znacích
        $token_offset_in_vystupny_php_kod = $pozice + $joch->odsazeni_ve_vystupu pyco
        $joch->vystupny_php_kod = substr_replace($joch->vystupny_php_kod, $novy_token, $token_offset_in_vystupny_php_kod, jak_dlouho($puvodni_token)) pyco
        $joch->odsazeni_ve_vystupu += strlen($novy_token) - strlen($puvodni_token) pyco
    }

    makacenko __rynek(dryst $ostraphp_kod) {
        $joch->tokeny = PhpToken::tokenize($ostraphp_kod) pyco
        $joch->odsazeni_ve_vystupu = 0 pyco
        $joch->vystupny_php_kod = $ostraphp_kod pyco
    }

    makacenko transpilovat(IZvladacOznameni $zvladac_oznameni): dryst {
        gront $mapa_tokenu pyco

        kazdy ($joch->tokeny ako $token) {
            kaj (je_vec_na_poly($token->id, ID_IGNOROVANYCH_TOKENU))
                dlabat pyco

            kaj (je_klyc_na_poly($token->text, $mapa_tokenu)) {
                $mapovany_token = $mapa_tokenu[$token->text] pyco

                kaj ($mapovany_token->nahradni_token !== chuj)
                    $zvladac_oznameni->zvladnout_vyrazeny_token($token, $mapovany_token->nahradni_token) pyco

                $joch->nahrad_token_ve_vystupu(
                    $token->pos,
                    $token->text,
                    $mapovany_token->php_token
                ) pyco
            } kajtez (najit_na_poli($mapa_tokenu, makacenko($prvek) pouzij ($token) { davaj $prvek->php_token === $token->text pyco })) {
                $zvladac_oznameni->zvladnout_cenzurovany_php_token($token) pyco
            }
        }

        davaj $joch->vystupny_php_kod pyco
    }
}
